Шаблон конкурирующих потребителей
Используется для эффективного распределения большого количества асинхронных сообщений между несколькими потребителями.

Основные компоненты и принцип работы этого паттерна выглядят так:

Производители сообщений

Один или несколько производителей отправляют сообщения в очередь.
Эти сообщения представляют собой задачи, которые нужно выполнить.
Очередь сообщений

Все сообщения попадают в одну централизованную очередь.
Потребители

Настраивается несколько экземпляров потребителей.
Каждый потребитель способен обрабатывать сообщения из очереди.
Конкуренция за сообщения

Потребители соревнуются друг с другом за получение и обработку сообщений.
Когда потребитель успешно получает сообщение, оно становится недоступным для других потребителей.
Обработка и удаление

После обработки сообщения потребитель подтверждает его получение.
Обработанное сообщение удаляется из очереди.
Ключевой момент в этом шаблоне – необходимость обработки каждого сообщения только одним потребителем. Разные инструменты и платформы решают эту задачу по-своему:

RabbitMQ использует предварительную выборку:
Потребители устанавливают лимит на количество неподтвержденных сообщений.
Полученное сообщение учитывается в полете и не доставляется другим потребителям.

Azure Service Bus применяет механизм peek-lock (просмотр и блокировка):
Потребитель получает сообщение в режиме peek-lock, что блокирует сообщение.
Сообщение остается в очереди, но становится невидимым для других потребителей.
После обработки потребитель помечает сообщение как завершенное.

AWS SQS устанавливает тайм-аут видимости:
При получении сообщения потребителем, SQS устанавливает тайм-аут видимости.
В течение этого времени сообщение скрыто от других потребителей.
После обработки потребитель удаляет сообщение.
Если тайм-аут истекает до удаления, сообщение снова становится видимым для других.