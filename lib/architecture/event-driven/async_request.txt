Шаблон асинхронного запроса-ответа
Позволяет создавать масштабируемые и устойчивые к сбоям системы, где сервисы могут взаимодействовать асинхронно, не блокируя друг друга и сохраняя способность корректно обрабатывать ответы даже при изменении состояния системы между запросом и ответом.

Проблемы, которые решает шаблон:
- В синхронном REST API один экземпляр запрашивающего сервиса всегда связан с одним экземпляром отвечающего сервиса.
- В асинхронной модели экземпляр, отправивший запрос, может быть недоступен к моменту получения ответа.
- Необходимо правильно соотнести запросы и ответы при наличии множества экземпляров сервисов.

Оптимальное решение этих проблем – использование корреляционного ID, уникального идентификатора, который связывает запрос и соответствующий ему ответ. При наличии такого ID организовать процесс работы (на примере показанного выше взаимодействия Сервиса заказов и Платежного сервиса) можно так:

1. Клиент размещает заказ через экземпляр.
2. Сервис заказов:
2.1 Генерирует уникальный корреляционный ID для этого заказа.
2.2. Сохраняет данные заказа и корреляционный ID в базе данных, распределенном кэше или локальной хэш-таблице.
2.3. Отправляет запрос на оплату в очередь запросов вместе с корреляционным ID.
3. Платежный сервис:
3.1 Получает запрос на оплату из очереди.
3.2 Обрабатывает платеж.
3.3. Отправляет ответ в очередь ответов, включая тот же корреляционный ID.
4. Сервис заказов (тот же или другой экземпляр):
4.1. Получает ответ из очереди ответов.
4.2. Использует корреляционный ID для сопоставления ответа с исходным запросом заказа.
4.3. Выполняет необходимые действия (например, подтверждение заказа).

Преимущества использования корреляционного ID:
_ Позволяет отправлять несколько запросов на оплату для одного заказа (повторные попытки, частичные платежи и т.д.).
- Разделяет логику маршрутизации и бизнес-контекст (например, ID заказа).
- Облегчает отслеживание потока запроса через несколько сервисов.

Важные аспекты, которые необходимо учесть при реализации шаблона:
- Хранение контекста – надо сохранять информацию о запросе и корреляционном ID.
- Обработка таймаутов – нужно предусмотреть механизм обработки ситуаций, когда ответ не приходит в ожидаемое время.
- Идемпотентность – важно обеспечить корректную обработку повторных ответов.