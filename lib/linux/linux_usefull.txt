0.потоки stdin, stdout, stderr сооеветственно 0,1,2
	перенаправление вывода > выполняется с усечением старого содержимоо, >> с добавлением к старому содержимому
1. часто при поиске надо подавить ошибки, для этого их можно вывести в специальный несуществующий файл
$ find /etc -name '*.xml' 2>/dev/null
2. в примере сохраняем в файл список установленных в системе пакетов, потом отправляем его по почте
$ dpkg -l > installed-pacakges
$ mail example@mai.local 0< installed-pacakges
$ rm -f installed-pacakges
3.Конвеерная обработка,использования результатов выполнения одной команды в качестве исходных данных для другой команды, без сохранения промежуточных данных
command1 | command2 | ...
	отправка списка установленных пакетов по почте
	$ dpkg -l | mail example@mail.local
	подсчет количества пустых файлов
	$ find / -size 0 2>/dev/null | wc -l
	генерация трех случайных восьмизначных паролей
	$ tr -dc a-zA-Z0-9 </dev/urandom | fold -w 8 | head -3
	удаление пустых файлов. во временном каталоге /tmp принадлежащие юзеру -user с именем bender, размер которых -size равен 0, -print0 разделяет в списке имена знаком 0, команда xargs последовательно применяет команду rm безусловного удаления -f 
	$ find /tmp -user bender -size 0 -print0 2>/dev/null | xargs -0 rm -f
4. Подстановки имен файлов
	метасимволы:
	? - любой один символ
	* - любое количество любых других символов
	[ab...z] - любой символ из набора a,b...z
	[!ab...z] или [^ab...z] - любой символ не из набора a,b...z
	~ - домашний каталог пользователя	
	например для просмотра файлов 
	$ ls [!a-z0-9]*
5. Подстановка параметров. Существуют три типа параметров: переменные, позиционные, специальные
6. Временное присвоение значений переменным окружения
$ env LANG=be_BY.utf8 TZ=Europe/Minsk ls -l   посмотреть
$ LANG=fi_FI.utf8 TZ=Europe/Helsinki ls -l временно присвоить в текушем окне
7. Позиционные параметры используются для передачи фактических параметров: $1 - первый аргумент, $0- имя самого сценария
9. Специальные параметры, хз как юзать зависит обстоятельств #, ?, !, @, $
10. Подстановка вывода команд command1 $(command2)
	удаление пустых файлов
	$ rm -f $(find /tmp -user $(id -un) -size 0)
	архив с датой создания в имени
	$ tar cif dotconfig-$(date +%F).tbz2 ~/.config
11. Подстановка арифметических выражений
	$ CIRCLE=$((2 * RADIUS * 355/113))
12. Операции экранирования, отменяющие метасимволы \mq , 'm1m2...', "m1m2..."
13. Списки команд, синхронные command1 ; command2 ..., асинхронные command1 & command2 ...
14. Условные списки команд
	command1 && command2 ... выполняет следующую, если предыдущая закончилась успешно
	command1 || command2 ... выполняет следующую, если предыдущая закончилась не успешно
	можно комбинировать
15. Составные списки: ветвление. 
	Команда test проверяет логическое выражение.
	проверяемое выражение помещается в []
	$ [ -b /dev/cdrom ] && eject /dev/cdrom
	eсли - для ветвления if, then, elif, else, fi
	case word in [ [(] patern2 [ pattern2] ... list2 ;; ] ... esac. Cлово word проверяют на соответствие шаблонам pattern слева направо, при совпадении выполняется спилок команд list
16. Cоставные списки циклы.
	цикл с параметром
	for name in [words ...]: do list: done
	цикл с условие "ПОКА"
	while [!] list; do list; done
	цикл с условием "ДО"
	unitl [!] list do list; done
	Пример, создание галереи миниатюр фотографий
	$ for file in $(find DCIM -name '*.jpg'
		> do
		> convert $file resize 100x $(basename $file .jpg).mini.jpg
		> done
=====================================================================
17. Функции - составной именованный список команд. Объявленные функции располагаются в оперативной памяти.Сохранить их нельзя, можно прописать в .badhrc или .profile
	POSIX-диалект name() compound-list
	Кorn-диалект function name compound-list
	$ function getusers
	> {
	>	getent passwd | cut -f 1 -d : | xargs -n1 id
	> }
	$ rype -a getusers
	$ getusers
18. Cценырии на языке командного интерпритатора, представляет собой текстовый файл со списком команд.Располокают их обычно в каталоге ~/bin или usr/local/bin и наделяют правами для исполнения.
19. Текст, расмечается:
	перевод строки \n (CR, ^J код 0x0A)
	поле, горизонтальная табуляция \t (HT, ^I код 0ч09)
	пробел (CPC код 0x20)
	или что то вроде :, |
20. Регулярные выражения
	. любой одиночный символ
	c* любое количество символов c
	.* любое количество любых символов
	[ab...z] любой символ из набора a,b...,z
	[^ab...z] любой символ не из набора a,b...,z
	^ начало строки
	$ конец строки
21. Фильтр строк grep, фильтруют и печатают поток вывода строки, соответствующие заданному регулярному выражению( fgrep фильтрует фиксированные слова)
	Выборка строк: список сценариев интерпритатора
	$ file -Li /*bin/* /usr/*bin/*  | fgrep shellscript
	Выборка строк: RSS-память процессов браузера chromium
	$ ps axo rss,comm | grep -F chromium
	Выборка строкЖ фильтрация комментариев
	$ grep '^[^#]' /etc/wgetrc
	Выборка строк с двузначными числами
	$ grep [^0-9][0-9][0-0][^0-9] /etc/services
22. Фильтр символов и полей cut. Применяется для вырезания указанных (порядковым номером) символов или полей (по заданному разделителю) каждой строки.С содержимым файла никаких действий не производится, только вывод. ( cut -f 1 -d :  - первое поле и разделитель :)
	Выборка строк и полей с помощью grep и cut: список имен стценария интерпритатора
	$ file -Li /*bin/* /user/*bin/* | grep shellscript | cut -f 1 -d :
23. Процессор текстовых таблиц awk. Для обработки текстовых таблиц, столбцы которых разделяются пробельными символами, а строки символом перевода строки. Регулярные выражения выделяют строки таблий.
$1,$2,$3,$N выделяют столбцы.Инструкция записывается как /RE/{ACTION $i...} и заставляет процессор выполнить действие ACTION со столбцами $i какждой строки, соответствующей регулярному выражению RE.
	Выборка строк и полей с помощью awk: список имен сценариев интерпритатора
	$ file -Li /*bin/* /usr/*bin/* |  awk -F: '/shellscript/ {print $1}'
24. Потоковый редактор текста sed (stream editor) применяется для пакетного (неинтерактивного) редактирования текстовых файлов, имеющих строчную структуру. Для выделения строк регулярные выражения, i (insert) a(append) вставка и добавление, c (change) замена строк, d (delete) удаление строк, s (subctitute) замена подстрок.
	Выборка строк: удаление лишних
	$ ps axo rss,comm | sed '/chromium/!d'
	Выборка строк: фальтрация комментариев. фильтруются строки файла /etc/wgetrc путем удаления из вывода строк, не соответствующих регулярному выражению
	$ sed '/^[^#]/!d' /etc/wgetrc
	При помощи инструкйий вида /RE1/,/RE2/CMD команда редактирования применяется ко всем строкам, начиная с той, которая соответствует выражению RE1, заканчивая той, которая соответствует выражению RE2
	Выборка блоков текста
	$ lspci -v | sed '/Ethernet/,/^$/!d'
	Массовая замена подстрок в файлах
	$ find . -name '*.pu' | xangs grep -wl module | xargs sed -i '/import/ s:\<module\>:Module:g'
	Включение и выключение коментариев в файлах.
	#net.ipv4.ip_forward=1
	вручную
	sudo sed -i '/net.ipv4.ip_forward/ s/^#//' /etc/sysctl.conf
	или скрипом
	$ cat /usr/local/bin/toggle-comment
	#!/bin/sh
	[ -n "$1" -a -f "$2" ] &&
		sed -i -e "/$1 s/^#//" -e t -e "/$1/ s/^/#/" $2 ||
		echo "Usage: toggle-comment RE file"
	$sudo toggle-comment net.ipv4.ip_forward /etc/sysctl.conf
=========================================================================================
25. Копирование при помощи ssh.При помощи архиватора tar создаётся сжатый архии каталога /usr/src/sys на удаленном узле grex.org, а результат перенаправляется в локальный файл optn-kernel-source.tgz
	$ ssh jake@grex.org tar czf - /usr/src/sys > openbsd-kernel-source.tgz
26. процедура применения ключей ssh. Генерируется ssh-keygen командой, закрытый ключ в локальном файле ~/.ssh/id_rsa и открытый ключ в ~/.ssh/id_rsa.pub. Затем командой ssh-copy-id открытый ключ регистрируется на удаленном сервере grex.org в файле ~/.ssh/authorized_keys
	$ ssh-keygen
	$ ssh-copy-id jake@grex.org
SSH-агете позволяет запомнить парольную фразу
	$ ssh-add
27. Команды для копирования файлов поверх SSH
	$ scp *.pdf jake@grep.org
	$ sftop jake@gtex.org
	для сетевой синхронизации
	$ rsync -avrz jake@grex.org:/usr/share/man/man1 .
28. Терминальные браузеры lynx, links, w3m
	$ lynx http://www.kernel.org
29. Интерактивные пользовательские агенты
	wget скачивание файлов ( -с режим докачки)
	$ wget -c http://www.brendangregg.com/Perf/linixperftools.png
	curl для разного
30. FTP клиенты ftp, lftp, ncftp, gftp
	$ lftp mirror.yandex.ru
31. Служба NFS, изначально разрабатывалась для прозрачного сетевого исползования файловых систем сервера тал, как будто они были непосредственно примонтированы в дерево каталогов клиента. Позволяют клиенту выполнять операции open, close, read, write, seek и пр. с люлой частью файла, без его передачи целиком.
	Пример монтирования файловой системы /Qmultimedia NTS-сервера NVR.local в каталог /mnt/network/nvr/Qmm при помощи протокола NFS v3 (-t nfs -o wers=3). Для получения списка экспортируемых (-e export) сервером файловых систем исползуется кщманда xhoenount:
	$ showmount -e NVR.local
	$ sudo mkdir -p /mnt/nerwork/nvr/!mm
	$ sudo mount -t nfs -o vers-3 NVR.local:/Qmultimediz /mnt/network/Qmm
	$ findmnt -t nfs
	$ ls /mnt/network/nvr/Qmm
